#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
–ò–∑–º–µ—Ä—è–µ—Ç –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –∏ –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
"""

import time
import subprocess
import asyncio
import sys

async def test_startup_time(script_name):
    """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    print(f"‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞: {script_name}")
    
    start_time = time.time()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    process = await asyncio.create_subprocess_exec(
        'python', script_name,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    
    startup_time = None
    try:
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        while True:
            line = await asyncio.wait_for(process.stdout.readline(), timeout=20.0)
            if not line:
                break
                
            line_str = line.decode().strip()
            
            # –ò—â–µ–º —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
            if any(phrase in line_str for phrase in [
                "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞", 
                "–≥–æ—Ç–æ–≤–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É",
                "–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω"
            ]):
                startup_time = time.time() - start_time
                print(f"   ‚úÖ {script_name}: {startup_time:.2f} —Å–µ–∫—É–Ω–¥")
                break
                
    except asyncio.TimeoutError:
        print(f"   ‚ùå {script_name}: —Ç–∞–π–º–∞—É—Ç (>20 —Å–µ–∫)")
        startup_time = 20.0
        
    finally:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        try:
            process.terminate()
            await asyncio.wait_for(process.wait(), timeout=3.0)
        except:
            try:
                process.kill()
            except:
                pass
    
    return startup_time

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º")
    print("=" * 60)
    
    systems = [
        "voice_chat_gemini.py",
        "voice_chat_gemini_pipecat.py"
    ]
    
    results = {}
    
    for system in systems:
        try:
            startup_time = await test_startup_time(system)
            results[system] = startup_time
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {system}: {e}")
            results[system] = None
        
        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        await asyncio.sleep(2)
    
    # –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø")
    print("=" * 60)
    
    classic_time = results.get("voice_chat_gemini.py")
    pipecat_time = results.get("voice_chat_gemini_pipecat.py")
    
    if classic_time and pipecat_time:
        diff = abs(classic_time - pipecat_time)
        faster_system = "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è" if classic_time < pipecat_time else "Pipecat-Style"
        
        print(f"‚ö° –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:")
        print(f"   voice_chat_gemini.py (–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è): {classic_time:.2f}—Å")
        print(f"   voice_chat_gemini_pipecat.py (Pipecat): {pipecat_time:.2f}—Å")
        print(f"   üèÜ {faster_system} —Å–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ {diff:.2f}—Å")
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        if classic_time > 0:
            overhead_pct = ((pipecat_time - classic_time) / classic_time) * 100
            if overhead_pct > 0:
                print(f"   üìä Pipecat-Style –º–µ–¥–ª–µ–Ω–Ω–µ–µ –Ω–∞ {overhead_pct:.1f}%")
            else:
                print(f"   üìä Pipecat-Style –±—ã—Å—Ç—Ä–µ–µ –Ω–∞ {abs(overhead_pct):.1f}%")
    
    print(f"\nüí° –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–º. PERFORMANCE_COMPARISON.md")
    print(f"üîç –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏: python performance_monitor.py")

if __name__ == "__main__":
    asyncio.run(main())
