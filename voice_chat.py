#!/usr/bin/env python3
"""
–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç —Å HeyGen Interactive Avatar —á–µ—Ä–µ–∑ Pipecat
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Deepgram STT, OpenAI ChatGPT, ElevenLabs TTS
"""

import asyncio
import logging
import os
import sys
from typing import Optional, Dict, Any

from pipecat.audio.vad.silero import SileroVADAnalyzer
from pipecat.pipeline.pipeline import Pipeline
from pipecat.pipeline.task import PipelineTask
from pipecat.pipeline.runner import PipelineRunner
from pipecat.processors.frame_processor import FrameDirection
from pipecat.frames.frames import (
    Frame, AudioRawFrame, TranscriptionFrame, 
    LLMMessagesFrame, TextFrame, TTSAudioRawFrame,
    EndFrame, StartFrame
)
from pipecat.services.deepgram import DeepgramSTTService
from pipecat.services.openai import OpenAILLMService
from pipecat.services.elevenlabs import ElevenLabsTTSService
from pipecat.transports.network.websocket import WebsocketTransport
from pipecat.vad.vad_analyzer import VADAnalyzer

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from heygen.session_manager import HeyGenSessionManager
from pipecat_integration.livekit_client import HeyGenLiveKitClient
from utils.logger import setup_logger
from utils.config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logger(__name__)

class VoiceChatOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º"""
    
    def __init__(self):
        self.config = Config()
        self.session_manager = HeyGenSessionManager(self.config.heygen_api_key)
        self.livekit_client = None
        self.current_session = None
        
        # –°–µ—Ä–≤–∏—Å—ã –¥–ª—è Pipecat
        self.deepgram_stt = None
        self.openai_llm = None
        self.elevenlabs_tts = None
        self.vad_analyzer = None
        
        # Pipeline –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.pipeline = None
        self.pipeline_task = None
        self.pipeline_runner = None
        
    async def initialize_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # Speech-to-Text (Deepgram)
        if self.config.deepgram_api_key:
            self.deepgram_stt = DeepgramSTTService(
                api_key=self.config.deepgram_api_key,
                model="nova-2",
                language="ru"  # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
            )
            logger.info("‚úÖ Deepgram STT –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–æ–≤–∞–Ω")
        else:
            logger.error("‚ùå Deepgram API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        # LLM (OpenAI ChatGPT)
        if self.config.openai_api_key:
            self.openai_llm = OpenAILLMService(
                api_key=self.config.openai_api_key,
                model="gpt-4o-mini",
                system_prompt="–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
            )
            logger.info("‚úÖ OpenAI LLM –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–æ–≤–∞–Ω")
        else:
            logger.error("‚ùå OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
            
        # Text-to-Speech (ElevenLabs - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if self.config.elevenlabs_api_key:
            self.elevenlabs_tts = ElevenLabsTTSService(
                api_key=self.config.elevenlabs_api_key,
                voice_id="21m00Tcm4TlvDq8ikWAM",  # Rachel voice
                model="eleven_multilingual_v2"
            )
            logger.info("‚úÖ ElevenLabs TTS –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–æ–≤–∞–Ω")
        else:
            logger.warning("‚ö†Ô∏è ElevenLabs API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–≤–∞—Ç–∞—Ä")
            
        # Voice Activity Detection
        self.vad_analyzer = SileroVADAnalyzer()
        logger.info("‚úÖ VAD –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–æ–≤–∞–Ω")
        
        return True
        
    async def create_session(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é —Å –∞–≤–∞—Ç–∞—Ä–æ–º"""
        try:
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –∞–≤–∞—Ç–∞—Ä–æ–º...")
            
            # –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.current_session:
                await self.session_manager.close_session(self.current_session["session_id"])
                
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            session_data = await self.session_manager.create_session()
            if not session_data:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
                return False
                
            self.current_session = session_data
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_data['session_id']}")
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
            success = await self.session_manager.start_session(session_data["session_id"])
            if success:
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                return True
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
            
    async def setup_livekit_connection(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LiveKit"""
        try:
            if not self.current_session:
                logger.error("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit")
                return False
                
            self.livekit_client = HeyGenLiveKitClient()
            
            success = await self.livekit_client.connect(
                url=self.current_session["url"],
                access_token=self.current_session["access_token"],
                session_id=self.current_session["session_id"]
            )
            
            if success:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ LiveKit")
                return True
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LiveKit")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit: {e}")
            return False
            
    async def create_pipeline(self):
        """–°–æ–∑–¥–∞—Ç—å Pipecat pipeline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–∞"""
        try:
            logger.info("–°–æ–∑–¥–∞–Ω–∏–µ Pipecat pipeline...")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
            processors = []
            
            # 1. VAD –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ—á–∏
            if self.vad_analyzer:
                processors.append(self.vad_analyzer)
                
            # 2. Speech-to-Text
            if self.deepgram_stt:
                processors.append(self.deepgram_stt)
                
            # 3. LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
            if self.openai_llm:
                processors.append(self.openai_llm)
                
            # 4. TTS –µ—Å–ª–∏ –µ—Å—Ç—å ElevenLabs
            if self.elevenlabs_tts:
                processors.append(self.elevenlabs_tts)
                
            # –°–æ–∑–¥–∞–µ–º pipeline
            self.pipeline = Pipeline(processors)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–¥—Ä–æ–≤
            self.pipeline.add_event_handler("on_transcription", self._on_transcription)
            self.pipeline.add_event_handler("on_llm_response", self._on_llm_response)
            self.pipeline.add_event_handler("on_tts_audio", self._on_tts_audio)
            
            logger.info("‚úÖ Pipeline —Å–æ–∑–¥–∞–Ω")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pipeline: {e}")
            return False
            
    async def _on_transcription(self, frame: TranscriptionFrame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
        transcription = frame.text.strip()
        if transcription:
            logger.info(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcription}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∞–≤–∞—Ç–∞—Ä—É —á–µ—Ä–µ–∑ HeyGen API
            if self.current_session:
                await self.session_manager.send_task(
                    self.current_session["session_id"],
                    transcription
                )
                
    async def _on_llm_response(self, frame: TextFrame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç LLM"""
        response_text = frame.text.strip()
        if response_text:
            logger.info(f"ü§ñ LLM –æ—Ç–≤–µ—Ç: {response_text}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≤–∞—Ç–∞—Ä—É
            if self.current_session:
                await self.session_manager.send_task(
                    self.current_session["session_id"],
                    response_text
                )
                
    async def _on_tts_audio(self, frame: TTSAudioRawFrame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –æ—Ç TTS"""
        logger.debug("üîä –ü–æ–ª—É—á–µ–Ω TTS –∞—É–¥–∏–æ –∫–∞–¥—Ä")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ
        
    async def start_voice_chat(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if not await self.initialize_services():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã")
                return False
                
            if not await self.create_session():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
                return False
                
            if not await self.setup_livekit_connection():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LiveKit")
                return False
                
            if not await self.create_pipeline():
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å pipeline")
                return False
                
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É pipeline
            self.pipeline_task = PipelineTask(self.pipeline)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º runner
            self.pipeline_runner = PipelineRunner()
            
            logger.info("üéâ –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
            logger.info("üé§ –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω, –∞–≤–∞—Ç–∞—Ä –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self.pipeline_runner.run(self.pipeline_task)
            
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ: {e}")
        finally:
            await self.cleanup()
            
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º pipeline
            if self.pipeline_runner:
                await self.pipeline_runner.cleanup()
                
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç LiveKit
            if self.livekit_client:
                await self.livekit_client.disconnect()
                
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            if self.current_session:
                await self.session_manager.close_session(self.current_session["session_id"])
                
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_vars = ["HEYGEN_API_KEY", "DEEPGRAM_API_KEY", "OPENAI_API_KEY"]
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        
        if missing_vars:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            logger.info("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ API –∫–ª—é—á–∏")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç
        orchestrator = VoiceChatOrchestrator()
        await orchestrator.start_voice_chat()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
