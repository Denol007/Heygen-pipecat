#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º
"""

import psutil
import time
import sys
from datetime import datetime

def find_voice_chat_processes():
    """–ù–∞–π—Ç–∏ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
    processes = []
    
    for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'memory_info', 'cpu_percent']):
        try:
            cmdline = ' '.join(proc.info['cmdline'] or [])
            if 'voice_chat_gemini' in cmdline and 'python' in cmdline:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã
                if 'pipecat' in cmdline:
                    system_type = "Pipecat-Style"
                else:
                    system_type = "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è"
                
                processes.append({
                    'pid': proc.info['pid'],
                    'type': system_type,
                    'memory_mb': proc.info['memory_info'].rss / 1024 / 1024,
                    'cpu_percent': proc.cpu_percent(),
                    'process': proc
                })
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    
    return processes

def monitor_performance(duration_seconds=60):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    print(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ({duration_seconds} —Å–µ–∫—É–Ω–¥)")
    print("=" * 80)
    print(f"{'–í—Ä–µ–º—è':<8} | {'–°–∏—Å—Ç–µ–º–∞':<15} | {'PID':<8} | {'–ü–∞–º—è—Ç—å':<10} | {'CPU':<8}")
    print("-" * 80)
    
    start_time = time.time()
    measurements = []
    
    try:
        while time.time() - start_time < duration_seconds:
            timestamp = datetime.now().strftime("%H:%M:%S")
            processes = find_voice_chat_processes()
            
            if not processes:
                print(f"{timestamp} | –ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞")
            else:
                for proc_info in processes:
                    memory_mb = proc_info['memory_mb']
                    cpu_percent = proc_info['cpu_percent']
                    
                    print(f"{timestamp} | {proc_info['type']:<15} | {proc_info['pid']:<8} | {memory_mb:<9.1f}MB | {cpu_percent:<7.1f}%")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ—Ä–µ–Ω–∏—è
                    measurements.append({
                        'timestamp': timestamp,
                        'type': proc_info['type'],
                        'memory_mb': memory_mb,
                        'cpu_percent': cpu_percent
                    })
            
            time.sleep(2)  # –ò–∑–º–µ—Ä–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    analyze_measurements(measurements)

def analyze_measurements(measurements):
    """–ê–Ω–∞–ª–∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π"""
    if not measurements:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print("\n" + "=" * 80)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 80)
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø–∞–º —Å–∏—Å—Ç–µ–º
    by_type = {}
    for m in measurements:
        system_type = m['type']
        if system_type not in by_type:
            by_type[system_type] = []
        by_type[system_type].append(m)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π —Å–∏—Å—Ç–µ–º–µ
    for system_type, data in by_type.items():
        if not data:
            continue
            
        memory_values = [m['memory_mb'] for m in data]
        cpu_values = [m['cpu_percent'] for m in data]
        
        avg_memory = sum(memory_values) / len(memory_values)
        max_memory = max(memory_values)
        min_memory = min(memory_values)
        
        avg_cpu = sum(cpu_values) / len(cpu_values)
        max_cpu = max(cpu_values)
        min_cpu = min(cpu_values)
        
        print(f"\nüîß {system_type}:")
        print(f"   üíæ –ü–∞–º—è—Ç—å: {avg_memory:.1f}MB (–º–∏–Ω: {min_memory:.1f}, –º–∞–∫—Å: {max_memory:.1f})")
        print(f"   üî• CPU: {avg_cpu:.1f}% (–º–∏–Ω: {min_cpu:.1f}, –º–∞–∫—Å: {max_cpu:.1f})")
        print(f"   üìä –ò–∑–º–µ—Ä–µ–Ω–∏–π: {len(data)}")
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–µ —Å–∏—Å—Ç–µ–º—ã
    if len(by_type) >= 2:
        print(f"\nüèÜ –°–†–ê–í–ù–ï–ù–ò–ï:")
        systems = list(by_type.keys())
        
        for i, sys1 in enumerate(systems):
            for sys2 in systems[i+1:]:
                data1 = by_type[sys1]
                data2 = by_type[sys2]
                
                avg_mem1 = sum(m['memory_mb'] for m in data1) / len(data1)
                avg_mem2 = sum(m['memory_mb'] for m in data2) / len(data2)
                
                avg_cpu1 = sum(m['cpu_percent'] for m in data1) / len(data1)
                avg_cpu2 = sum(m['cpu_percent'] for m in data2) / len(data2)
                
                mem_diff = abs(avg_mem1 - avg_mem2)
                cpu_diff = abs(avg_cpu1 - avg_cpu2)
                
                if avg_mem1 < avg_mem2:
                    print(f"   üíæ {sys1} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞ {mem_diff:.1f}MB –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏")
                else:
                    print(f"   üíæ {sys2} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞ {mem_diff:.1f}MB –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏")
                
                if avg_cpu1 < avg_cpu2:
                    print(f"   üî• {sys1} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞ {cpu_diff:.1f}% –º–µ–Ω—å—à–µ CPU")
                else:
                    print(f"   üî• {sys2} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞ {cpu_diff:.1f}% –º–µ–Ω—å—à–µ CPU")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üìä –ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —á–∞—Ç —Å–∏—Å—Ç–µ–º")
    print("=" * 60)
    print("üéØ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ–¥–Ω—É –∏–ª–∏ –æ–±–µ —Å–∏—Å—Ç–µ–º—ã –≤ –¥—Ä—É–≥–∏—Ö —Ç–µ—Ä–º–∏–Ω–∞–ª–∞—Ö:")
    print("   python voice_chat_gemini.py")
    print("   python voice_chat_gemini_pipecat.py")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    processes = find_voice_chat_processes()
    if processes:
        print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:")
        for proc_info in processes:
            print(f"   {proc_info['type']} (PID: {proc_info['pid']})")
    else:
        print("‚ö†Ô∏è  –ì–æ–ª–æ—Å–æ–≤—ã–µ —á–∞—Ç —Å–∏—Å—Ç–µ–º—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∏—Å—Ç–µ–º—ã –∏ –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä")
        return
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    try:
        duration = input("\n‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 60): ")
        if duration.strip():
            duration = int(duration)
        else:
            duration = 60
    except ValueError:
        duration = 60
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    monitor_performance(duration)
    
    print("\nüéâ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∫–∞–∑–∞–Ω—ã –≤—ã—à–µ")

if __name__ == "__main__":
    main()
