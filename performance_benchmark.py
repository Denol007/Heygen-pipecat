#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —á–∞—Ç —Å–∏—Å—Ç–µ–º
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ voice_chat_gemini.py vs voice_chat_gemini_pipecat.py
"""

import asyncio
import time
import psutil
import os
import sys
import json
import threading
import logging
from typing import Dict, List, Optional
from dataclasses import dataclass
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

@dataclass
class PerformanceMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    system_name: str
    startup_time: float
    memory_usage_mb: float
    cpu_usage_percent: float
    response_times: List[float]
    avg_response_time: float
    peak_memory_mb: float
    total_api_calls: int
    errors_count: int
    test_duration: float

class PerformanceMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, process_name: str):
        self.process_name = process_name
        self.start_time = time.time()
        self.monitoring = False
        self.memory_samples = []
        self.cpu_samples = []
        self.process = None
        
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.monitoring = True
        self.start_time = time.time()
        self.monitor_thread = threading.Thread(target=self._monitor_loop)
        self.monitor_thread.daemon = True
        self.monitor_thread.start()
        
    def stop_monitoring(self) -> Dict:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        self.monitoring = False
        if hasattr(self, 'monitor_thread'):
            self.monitor_thread.join(timeout=2.0)
            
        return {
            'duration': time.time() - self.start_time,
            'avg_memory_mb': sum(self.memory_samples) / len(self.memory_samples) if self.memory_samples else 0,
            'peak_memory_mb': max(self.memory_samples) if self.memory_samples else 0,
            'avg_cpu_percent': sum(self.cpu_samples) / len(self.cpu_samples) if self.cpu_samples else 0,
            'memory_samples': len(self.memory_samples),
            'cpu_samples': len(self.cpu_samples)
        }
    
    def _monitor_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.monitoring:
            try:
                # –ù–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –ø–æ –∏–º–µ–Ω–∏
                for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                    try:
                        cmdline = ' '.join(proc.info['cmdline'] or [])
                        if self.process_name in cmdline and 'python' in cmdline:
                            # –ò–∑–º–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
                            memory_info = proc.memory_info()
                            memory_mb = memory_info.rss / 1024 / 1024
                            self.memory_samples.append(memory_mb)
                            
                            # –ò–∑–º–µ—Ä—è–µ–º CPU
                            cpu_percent = proc.cpu_percent()
                            self.cpu_samples.append(cpu_percent)
                            
                            self.process = proc
                            break
                    except (psutil.NoSuchProcess, psutil.AccessDenied):
                        continue
                        
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                
            time.sleep(0.5)  # –ó–∞–º–µ—Ä –∫–∞–∂–¥—ã–µ 500–º—Å

class SystemTester:
    """–¢–µ—Å—Ç–µ—Ä —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, system_name: str, script_path: str):
        self.system_name = system_name
        self.script_path = script_path
        self.monitor = PerformanceMonitor(script_path)
        
    async def run_startup_test(self) -> float:
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞"""
        logger.info(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ {self.system_name}...")
        
        start_time = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process = await asyncio.create_subprocess_exec(
            'python', self.script_path,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
            cwd='/Users/denol/Desktop/speekhead/lasttry'
        )
        
        # –ñ–¥–µ–º –ø–æ–∫–∞ —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è (–∏—â–µ–º "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞")
        startup_time = None
        try:
            while True:
                line = await asyncio.wait_for(process.stdout.readline(), timeout=30.0)
                if not line:
                    break
                    
                line_str = line.decode().strip()
                logger.debug(f"{self.system_name}: {line_str}")
                
                # –ò—â–µ–º —Å–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
                if "–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞" in line_str or "–≥–æ—Ç–æ–≤–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É" in line_str:
                    startup_time = time.time() - start_time
                    logger.info(f"‚úÖ {self.system_name} –∑–∞–ø—É—â–µ–Ω –∑–∞ {startup_time:.2f} —Å–µ–∫")
                    break
                    
                # –ò—â–µ–º –æ—à–∏–±–∫–∏
                if "‚ùå" in line_str or "ERROR" in line_str:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {self.system_name}: {line_str}")
                    
        except asyncio.TimeoutError:
            logger.error(f"‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ {self.system_name}")
            startup_time = 30.0  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            
        finally:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            try:
                process.terminate()
                await asyncio.wait_for(process.wait(), timeout=5.0)
            except:
                process.kill()
                
        return startup_time or 30.0
    
    async def run_memory_test(self, duration: int = 30) -> Dict:
        """–¢–µ—Å—Ç –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        logger.info(f"üíæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ {self.system_name} ({duration}—Å–µ–∫)...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.monitor.start_monitoring()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process = await asyncio.create_subprocess_exec(
            'python', self.script_path,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.DEVNULL,
            cwd='/Users/denol/Desktop/speekhead/lasttry'
        )
        
        # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
        try:
            await asyncio.sleep(duration)
        finally:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            try:
                process.terminate()
                await asyncio.wait_for(process.wait(), timeout=5.0)
            except:
                process.kill()
                
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        results = self.monitor.stop_monitoring()
        
        logger.info(f"üìä {self.system_name} - –ü–∞–º—è—Ç—å: {results['avg_memory_mb']:.1f}MB (–ø–∏–∫: {results['peak_memory_mb']:.1f}MB)")
        logger.info(f"üìä {self.system_name} - CPU: {results['avg_cpu_percent']:.1f}%")
        
        return results

class BenchmarkRunner:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–µ–Ω—á–º–∞—Ä–∫–æ–≤"""
    
    def __init__(self):
        self.systems = {
            '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞': 'voice_chat_gemini.py',
            'Pipecat-Style —Å–∏—Å—Ç–µ–º–∞': 'voice_chat_gemini_pipecat.py'
        }
        self.results = {}
        
    async def run_all_benchmarks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        logger.info("üî• –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        logger.info("=" * 70)
        
        for system_name, script_path in self.systems.items():
            logger.info(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {system_name}")
            logger.info("-" * 50)
            
            tester = SystemTester(system_name, script_path)
            
            # –¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞
            startup_time = await tester.run_startup_test()
            
            # –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏ (30 —Å–µ–∫—É–Ω–¥)
            memory_results = await tester.run_memory_test(30)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            self.results[system_name] = {
                'startup_time': startup_time,
                'memory_results': memory_results
            }
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            await asyncio.sleep(5)
            
        # –í—ã–≤–æ–¥–∏–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
        self.print_comparison()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        self.save_results()
    
    def print_comparison(self):
        """–í—ã–≤–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        logger.info("\n" + "=" * 70)
        logger.info("üìä –°–†–ê–í–ù–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
        logger.info("=" * 70)
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\nüìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:")
        print("+" + "-" * 68 + "+")
        print(f"| {'–ú–µ—Ç—Ä–∏–∫–∞':<25} | {'–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è':<18} | {'Pipecat-Style':<18} |")
        print("+" + "-" * 68 + "+")
        
        if len(self.results) >= 2:
            classic = list(self.results.values())[0]
            pipecat = list(self.results.values())[1]
            
            print(f"| {'–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞':<25} | {classic['startup_time']:<17.2f}s | {pipecat['startup_time']:<17.2f}s |")
            print(f"| {'–°—Ä–µ–¥–Ω—è—è –ø–∞–º—è—Ç—å':<25} | {classic['memory_results']['avg_memory_mb']:<17.1f}MB | {pipecat['memory_results']['avg_memory_mb']:<17.1f}MB |")
            print(f"| {'–ü–∏–∫–æ–≤–∞—è –ø–∞–º—è—Ç—å':<25} | {classic['memory_results']['peak_memory_mb']:<17.1f}MB | {pipecat['memory_results']['peak_memory_mb']:<17.1f}MB |")
            print(f"| {'–°—Ä–µ–¥–Ω–∏–π CPU':<25} | {classic['memory_results']['avg_cpu_percent']:<17.1f}% | {pipecat['memory_results']['avg_cpu_percent']:<17.1f}% |")
            
            print("+" + "-" * 68 + "+")
            
            # –í—ã–≤–æ–¥—ã
            print("\nüèÜ –í–´–í–û–î–´:")
            
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
            if classic['startup_time'] < pipecat['startup_time']:
                diff = pipecat['startup_time'] - classic['startup_time']
                print(f"‚ö° –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ {diff:.2f}—Å –±—ã—Å—Ç—Ä–µ–µ")
            else:
                diff = classic['startup_time'] - pipecat['startup_time']
                print(f"‚ö° Pipecat-Style —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ {diff:.2f}—Å –±—ã—Å—Ç—Ä–µ–µ")
                
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
            classic_mem = classic['memory_results']['avg_memory_mb']
            pipecat_mem = pipecat['memory_results']['avg_memory_mb']
            
            if classic_mem < pipecat_mem:
                diff = pipecat_mem - classic_mem
                pct = (diff / classic_mem) * 100
                print(f"üíæ –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞ {diff:.1f}MB ({pct:.1f}%) –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏")
            else:
                diff = classic_mem - pipecat_mem
                pct = (diff / pipecat_mem) * 100
                print(f"üíæ Pipecat-Style —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞ {diff:.1f}MB ({pct:.1f}%) –º–µ–Ω—å—à–µ –ø–∞–º—è—Ç–∏")
                
            # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ CPU
            classic_cpu = classic['memory_results']['avg_cpu_percent']
            pipecat_cpu = pipecat['memory_results']['avg_cpu_percent']
            
            if classic_cpu < pipecat_cpu:
                diff = pipecat_cpu - classic_cpu
                print(f"üî• –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞ {diff:.1f}% –º–µ–Ω—å—à–µ CPU")
            else:
                diff = classic_cpu - pipecat_cpu
                print(f"üî• Pipecat-Style —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞ {diff:.1f}% –º–µ–Ω—å—à–µ CPU")
    
    def save_results(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"performance_results_{timestamp}.json"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        results_with_meta = {
            'timestamp': timestamp,
            'test_date': datetime.now().isoformat(),
            'system_info': {
                'python_version': sys.version,
                'platform': sys.platform,
                'cpu_count': psutil.cpu_count(),
                'total_memory_gb': psutil.virtual_memory().total / 1024 / 1024 / 1024
            },
            'results': self.results
        }
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results_with_meta, f, indent=2, ensure_ascii=False)
            
            logger.info(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üî• –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —á–∞—Ç —Å–∏—Å—Ç–µ–º")
    print("=" * 60)
    print("üéØ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ: voice_chat_gemini.py vs voice_chat_gemini_pipecat.py")
    print("üìä –ú–µ—Ç—Ä–∏–∫–∏: –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞, –ø–∞–º—è—Ç—å, CPU")
    print("‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ~2-3 –º–∏–Ω—É—Ç—ã")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    required_files = ['voice_chat_gemini.py', 'voice_chat_gemini_pipecat.py']
    for file in required_files:
        if not os.path.exists(file):
            print(f"‚ùå –§–∞–π–ª {file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = BenchmarkRunner()
    await runner.run_all_benchmarks()
    
    print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    asyncio.run(main())
