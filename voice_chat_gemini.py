#!/usr/bin/env python3
"""
–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç —Å HeyGen Interactive Avatar
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Deepgram STT + Google Gemini LLM + HeyGen Avatar
"""

import asyncio
import logging
import os
import sys
import json
import time
import threading
import queue
from typing import Optional, Dict, Any
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# Speech-to-Text
from deepgram import (
    DeepgramClient,
    LiveTranscriptionEvents,
    LiveOptions,
    Microphone,
)

# LLM - Google Gemini
import google.generativeai as genai

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from heygen.session_manager import HeyGenSessionManager
from pipecat_integration.livekit_client import HeyGenLiveKitClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class VoiceChatWithGemini:
    """–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç —Å Gemini –∏ –∞–≤–∞—Ç–∞—Ä–æ–º"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.heygen_api_key = os.getenv("HEYGEN_API_KEY")
        self.deepgram_api_key = os.getenv("DEEPGRAM_API_KEY")
        self.gemini_api_key = os.getenv("GEMINI_API_KEY")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        if not self.heygen_api_key or self.heygen_api_key == "your_heygen_api_key_here":
            raise ValueError("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π HEYGEN_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        if not self.deepgram_api_key:
            raise ValueError("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DEEPGRAM_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        if not self.gemini_api_key:
            raise ValueError("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.session_manager = HeyGenSessionManager(self.heygen_api_key)
        self.livekit_client = None
        self.current_session = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Deepgram
        self.deepgram_client = DeepgramClient(self.deepgram_api_key)
        self.deepgram_connection = None
        self.microphone = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini
        genai.configure(api_key=self.gemini_api_key)
        self.gemini_model = genai.GenerativeModel('gemini-1.5-flash')
        
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_queue = queue.Queue()
        self.is_running = False
        self.processing_thread = None
        
        logger.info("‚úÖ VoiceChatWithGemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def test_apis(self) -> bool:
        """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ API"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
        
        # –¢–µ—Å—Ç Gemini
        try:
            response = self.gemini_model.generate_content("–°–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
            logger.info(f"‚úÖ Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.text}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Gemini API: {e}")
            return False
            
        # –¢–µ—Å—Ç Deepgram
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Deepgram
            logger.info("‚úÖ Deepgram API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Deepgram API: {e}")
            return False
            
        return True
        
    async def generate_llm_response(self, user_input: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Gemini"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            prompt = f"""–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), 
            –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø–æ-–¥—Ä—É–∂–µ—Å–∫–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
            
            {user_input}"""
            
            response = self.gemini_model.generate_content(prompt)
            return response.text.strip()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ Gemini: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
    
    async def create_session(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é —Å –∞–≤–∞—Ç–∞—Ä–æ–º"""
        try:
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –∞–≤–∞—Ç–∞—Ä–æ–º...")
            
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            success = await self.session_manager.create_session()
            if not success:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            if not self.session_manager.session_id:
                logger.error("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω session_id")
                return False
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            self.current_session = {
                "session_id": self.session_manager.session_id,
                "url": self.session_manager.websocket_url,
                "access_token": self.session_manager.access_token
            }
            
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.session_manager.session_id}")
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
            start_success = await self.session_manager.start_session()
            if start_success:
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
            
    async def setup_livekit_connection(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LiveKit –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ"""
        try:
            if not self.current_session:
                logger.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit")
                return False
                
            self.livekit_client = HeyGenLiveKitClient()
            
            success = await self.livekit_client.connect(
                url=self.current_session["url"],
                access_token=self.current_session["access_token"],
                session_id=self.current_session["session_id"]
            )
            
            if success:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ LiveKit")
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏
                session_task_id = f"session_{self.current_session['session_id']}"
                await self.livekit_client.start_recording(session_task_id)
                logger.info("üé¨ –ù–∞—á–∞–ª–∞—Å—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –≤—Å–µ–π —Å–µ—Å—Å–∏–∏")
                
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LiveKit")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit: {e}")
            return False
    
    def setup_deepgram_connection(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Deepgram –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏"""
        try:
            logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Deepgram STT...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∂–∏–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
            options = LiveOptions(
                model="nova-2",
                language="ru",  # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
                smart_format=True,
                interim_results=True,
                utterance_end_ms="1000",
                vad_events=True,
                encoding="linear16",
                channels=1,
                sample_rate=16000,
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Deepgram
            self.deepgram_connection = self.deepgram_client.listen.websocket.v("1")
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            def on_message(self_event, result, **kwargs):
                sentence = result.channel.alternatives[0].transcript
                if sentence and result.is_final:
                    logger.info(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{sentence}'")
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    self.message_queue.put(sentence)
                    
            def on_metadata(self_event, metadata, **kwargs):
                logger.debug(f"üìä –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Deepgram: {metadata}")
                
            def on_speech_started(self_event, speech_started, **kwargs):
                logger.debug("üé§ –ù–∞—á–∞–ª–æ —Ä–µ—á–∏")
                
            def on_utterance_end(self_event, utterance_end, **kwargs):
                logger.debug("üé§ –ö–æ–Ω–µ—Ü –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è")
                
            def on_error(self_event, error, **kwargs):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Deepgram: {error}")
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.deepgram_connection.on(LiveTranscriptionEvents.Transcript, on_message)
            self.deepgram_connection.on(LiveTranscriptionEvents.Metadata, on_metadata)
            self.deepgram_connection.on(LiveTranscriptionEvents.SpeechStarted, on_speech_started)
            self.deepgram_connection.on(LiveTranscriptionEvents.UtteranceEnd, on_utterance_end)
            self.deepgram_connection.on(LiveTranscriptionEvents.Error, on_error)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if self.deepgram_connection.start(options):
                logger.info("‚úÖ Deepgram –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
                self.microphone = Microphone(self.deepgram_connection.send)
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Deepgram")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Deepgram: {e}")
            return False
    
    def start_microphone(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω"""
        try:
            if self.microphone:
                self.microphone.start()
                logger.info("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—É—â–µ–Ω")
                return True
            else:
                logger.error("‚ùå –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
            return False
    
    def stop_microphone(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω"""
        try:
            if self.microphone:
                self.microphone.finish()
                logger.info("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
    
    async def process_voice_message(self, transcript: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: '{transcript}'")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Gemini
            logger.info("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ Gemini...")
            llm_response = await self.generate_llm_response(transcript)
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç Gemini: '{llm_response}'")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            if self.current_session and self.livekit_client:
                logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä—É...")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∞–≤–∞—Ç–∞—Ä—É (–∑–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç)
                await self.session_manager.send_task(
                    text=llm_response,
                    task_type="repeat"
                )
                
                logger.info(f"ÔøΩ –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: '{llm_response[:50]}...'")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def message_processing_worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        while self.is_running:
            try:
                # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
                transcript = self.message_queue.get(timeout=1.0)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                asyncio.run(self.process_voice_message(transcript))
                
                self.message_queue.task_done()
                
            except queue.Empty:
                # –¢–∞–π–º–∞—É—Ç - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
                continue
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                
        logger.info("üõë –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def run_voice_chat(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å Gemini...")
            logger.info("=" * 60)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
            if not await self.test_apis():
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∞–≤–∞—Ç–∞—Ä–æ–º
            if not await self.create_session():
                return False
                
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ LiveKit –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
            if not await self.setup_livekit_connection():
                return False
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Deepgram
            if not self.setup_deepgram_connection():
                return False
            
            logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É!")
            logger.info("üìã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ú–∏–∫—Ä–æ—Ñ–æ–Ω ‚Üí Deepgram STT ‚Üí Gemini LLM ‚Üí HeyGen Avatar ‚Üí –í–∏–¥–µ–æ")
            logger.info("=" * 60)
            logger.info("üé§ –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            self.is_running = True
            self.processing_thread = threading.Thread(target=self.message_processing_worker)
            self.processing_thread.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            if not self.start_microphone():
                return False
            
            # –ñ–¥–µ–º –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                while self.is_running:
                    await asyncio.sleep(1.0)
            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ: {e}")
        finally:
            await self.cleanup()
            
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            self.is_running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            self.stop_microphone()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Deepgram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if self.deepgram_connection:
                self.deepgram_connection.finish()
                logger.info("üîå Deepgram –æ—Ç–∫–ª—é—á–µ–Ω")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if self.processing_thread and self.processing_thread.is_alive():
                self.processing_thread.join(timeout=3.0)
                logger.info("üõë –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                logger.info("üßµ –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å –∏ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç LiveKit
            if self.livekit_client:
                logger.info("üé¨ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤—Å–µ–π —Å–µ—Å—Å–∏–∏...")
                video_file = await self.livekit_client.stop_recording()
                if video_file:
                    logger.info(f"üìπ –ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {video_file}")
                else:
                    logger.warning("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏ –Ω–µ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
                    
                await self.livekit_client.disconnect()
                
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∞–≤–∞—Ç–∞—Ä–æ–º
            if self.current_session:
                await self.session_manager.close_session()
                
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print("ü§ñ HeyGen Voice Chat with Gemini")
        print("=" * 50)
        print("üìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   üé§ STT: Deepgram (—Ä–µ–∞–ª—å–Ω—ã–π)")
        print("   üß† LLM: Google Gemini (—Ä–µ–∞–ª—å–Ω—ã–π)")  
        print("   üë§ Avatar: HeyGen Interactive")
        print("   üìπ Video: LiveKit –∑–∞–ø–∏—Å—å + –∞—É–¥–∏–æ")
        print("=" * 50)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç
        chat = VoiceChatWithGemini()
        await chat.run_voice_chat()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
