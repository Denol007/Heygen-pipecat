#!/usr/bin/env python3
"""
–ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç —Å HeyGen Interactive Avatar - Pipecat-inspired –≤–µ—Ä—Å–∏—è
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Deepgram STT + Google Gemini LLM + HeyGen Avatar –≤ —Å—Ç–∏–ª–µ Pipecat
"""

import asyncio
import logging
import os
import sys
import json
import time
import threading
import queue
from typing import Optional, Dict, Any, List
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# Speech-to-Text
from deepgram import (
    DeepgramClient,
    LiveTranscriptionEvents,
    LiveOptions,
    Microphone,
)

# LLM - Google Gemini
import google.generativeai as genai

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from heygen.session_manager import HeyGenSessionManager
from pipecat_integration.livekit_client import HeyGenLiveKitClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class Frame:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ñ—Ä–µ–π–º–æ–≤ –≤ Pipecat-style pipeline"""
    pass

class AudioFrame(Frame):
    """–§—Ä–µ–π–º —Å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏"""
    def __init__(self, audio_data: bytes):
        self.audio_data = audio_data

class TextFrame(Frame):
    """–§—Ä–µ–π–º —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    def __init__(self, text: str):
        self.text = text

class TranscriptionFrame(Frame):
    """–§—Ä–µ–π–º —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π —Ä–µ—á–∏"""
    def __init__(self, text: str, is_final: bool = True):
        self.text = text
        self.is_final = is_final

class LLMResponseFrame(Frame):
    """–§—Ä–µ–π–º —Å –æ—Ç–≤–µ—Ç–æ–º LLM"""
    def __init__(self, text: str):
        self.text = text

class FrameProcessor:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Ñ—Ä–µ–π–º–æ–≤"""
    
    def __init__(self):
        self.downstream = None
    
    def set_downstream(self, processor):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ pipeline"""
        self.downstream = processor
    
    async def process_frame(self, frame: Frame):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ—Ä–µ–π–º"""
        # –ë–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç —Ñ—Ä–µ–π–º –¥–∞–ª—å—à–µ
        if self.downstream:
            await self.downstream.process_frame(frame)
    
    async def push_frame(self, frame: Frame):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ—Ä–µ–π–º –¥–∞–ª—å—à–µ –ø–æ pipeline"""
        if self.downstream:
            await self.downstream.process_frame(frame)

class DeepgramSTTProcessor(FrameProcessor):
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —á–µ—Ä–µ–∑ Deepgram"""
    
    def __init__(self, api_key: str):
        super().__init__()
        self.api_key = api_key
        self.deepgram_client = DeepgramClient(api_key)
        self.deepgram_connection = None
        self.microphone = None
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ STT —Å–µ—Ä–≤–∏—Å–∞"""
        try:
            logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Deepgram STT...")
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∂–∏–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
            options = LiveOptions(
                model="nova-2",
                language="ru",
                smart_format=True,
                interim_results=True,
                utterance_end_ms="1000",
                vad_events=True,
                encoding="linear16",
                channels=1,
                sample_rate=16000,
            )
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Deepgram
            self.deepgram_connection = self.deepgram_client.listen.websocket.v("1")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–∞–≤–Ω—ã–π event loop
            main_loop = asyncio.get_event_loop()
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            def on_message(self_event, result, **kwargs):
                sentence = result.channel.alternatives[0].transcript
                if sentence and result.is_final:
                    logger.info(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{sentence}'")
                    # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–ª—å—à–µ
                    frame = TranscriptionFrame(sentence, is_final=True)
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω—ã–π event loop —á–µ—Ä–µ–∑ call_soon_threadsafe
                    try:
                        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                        future = asyncio.run_coroutine_threadsafe(
                            self.push_frame(frame), 
                            main_loop
                        )
                        # –ù–µ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –ø—Ä–æ—Å—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ—Ä–µ–π–º–∞: {e}")
                    
            def on_error(self_event, error, **kwargs):
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Deepgram: {error}")
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.deepgram_connection.on(LiveTranscriptionEvents.Transcript, on_message)
            self.deepgram_connection.on(LiveTranscriptionEvents.Error, on_error)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            if self.deepgram_connection.start(options):
                logger.info("‚úÖ Deepgram –ø–æ–¥–∫–ª—é—á–µ–Ω")
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
                self.microphone = Microphone(self.deepgram_connection.send)
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Deepgram")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Deepgram: {e}")
            return False
    
    def start_microphone(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω"""
        try:
            if self.microphone:
                self.microphone.start()
                logger.info("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—É—â–µ–Ω")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
            return False
    
    def stop_microphone(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω"""
        try:
            if self.microphone:
                self.microphone.finish()
                logger.info("üé§ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.stop_microphone()
        if self.deepgram_connection:
            self.deepgram_connection.finish()
            logger.info("üîå Deepgram –æ—Ç–∫–ª—é—á–µ–Ω")

class GeminiLLMProcessor(FrameProcessor):
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ Gemini"""
    
    def __init__(self, api_key: str):
        super().__init__()
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        self.conversation_history = []
        
    async def process_frame(self, frame: Frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ñ—Ä–µ–π–º–æ–≤"""
        if isinstance(frame, TranscriptionFrame):
            # –ü–æ–ª—É—á–∏–ª–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ä–µ—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_text = frame.text
            logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: '{user_text}'")
            logger.info("üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ Gemini...")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini
            try:
                response = await self._generate_response(user_text)
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç Gemini: '{response}'")
                
                # –°–æ–∑–¥–∞–µ–º —Ñ—Ä–µ–π–º —Å –æ—Ç–≤–µ—Ç–æ–º LLM –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–ª—å—à–µ
                llm_frame = LLMResponseFrame(response)
                await self.push_frame(llm_frame)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ Gemini: {e}")
                error_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
                llm_frame = LLMResponseFrame(error_response)
                await self.push_frame(llm_frame)
        else:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ—Ä–µ–π–º—ã –¥–∞–ª—å—à–µ
            await super().process_frame(frame)
    
    async def _generate_response(self, user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            context = "\\n".join(self.conversation_history[-10:])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
            prompt = f"""–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫-–∞–≤–∞—Ç–∞—Ä. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
{context}

–î–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.model.generate_content(prompt)
            response_text = response.text.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {response_text}")
            
            return response_text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Gemini API: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

class HeyGenAvatarProcessor(FrameProcessor):
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å HeyGen Avatar"""
    
    def __init__(self, api_key: str):
        super().__init__()
        self.session_manager = HeyGenSessionManager(api_key)
        self.livekit_client = None
        self.current_session = None
        self.is_recording = False
        
    async def start_session(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ HeyGen"""
        try:
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ HeyGen...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
            success = await self.session_manager.create_session()
            if not success:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é HeyGen")
                return False
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            self.current_session = {
                "session_id": self.session_manager.session_id,
                "url": self.session_manager.websocket_url,
                "access_token": self.session_manager.access_token
            }
            
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è HeyGen —Å–æ–∑–¥–∞–Ω–∞: {self.session_manager.session_id}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
            start_success = await self.session_manager.start_session()
            if start_success:
                logger.info("‚úÖ –°–µ—Å—Å–∏—è HeyGen –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                
                # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ LiveKit –¥–ª—è –∑–∞–ø–∏—Å–∏
                await self._setup_livekit()
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é HeyGen")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ HeyGen: {e}")
            return False
    
    async def _setup_livekit(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ LiveKit –¥–ª—è –∑–∞–ø–∏—Å–∏"""
        try:
            self.livekit_client = HeyGenLiveKitClient()
            
            success = await self.livekit_client.connect(
                url=self.current_session["url"],
                access_token=self.current_session["access_token"],
                session_id=self.current_session["session_id"]
            )
            
            if success:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ LiveKit")
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—É—é –∑–∞–ø–∏—Å—å
                session_task_id = f"pipecat_session_{self.current_session['session_id']}"
                await self.livekit_client.start_recording(session_task_id)
                self.is_recording = True
                logger.info("üé¨ –ù–∞—á–∞–ª–∞—Å—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏ (Pipecat-style)")
                
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LiveKit")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LiveKit: {e}")
    
    async def process_frame(self, frame: Frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ñ—Ä–µ–π–º–æ–≤"""
        if isinstance(frame, LLMResponseFrame):
            # –ü–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç –æ—Ç LLM –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä—É
            text = frame.text
            logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä—É...")
            
            try:
                if self.current_session:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∞–≤–∞—Ç–∞—Ä—É
                    await self.session_manager.send_task(
                        text=text,
                        task_type="repeat"
                    )
                    logger.info(f"üí¨ –ê–≤–∞—Ç–∞—Ä –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text[:50]}...'")
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ HeyGen")
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–≤–∞—Ç–∞—Ä—É: {e}")
        else:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ—Ä–µ–π–º—ã –¥–∞–ª—å—à–µ
            await super().process_frame(frame)
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ HeyGen...")
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
            if self.livekit_client and self.is_recording:
                logger.info("üé¨ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å–µ—Å—Å–∏–∏...")
                video_file = await self.livekit_client.stop_recording()
                if video_file:
                    logger.info(f"üìπ –ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {video_file}")
                    
                await self.livekit_client.disconnect()
                
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
            if self.current_session:
                await self.session_manager.close_session()
                
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ HeyGen –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ HeyGen: {e}")

class PipecatStylePipeline:
    """Pipecat-style pipeline –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ—Ä–µ–π–º–æ–≤"""
    
    def __init__(self, processors: List[FrameProcessor]):
        self.processors = processors
        
        # –°–≤—è–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –≤ —Ü–µ–ø–æ—á–∫—É
        for i in range(len(processors) - 1):
            processors[i].set_downstream(processors[i + 1])
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ pipeline"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ —Ç—Ä–µ–±—É—é—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        for processor in self.processors:
            if hasattr(processor, 'start'):
                await processor.start()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ pipeline"""
        for processor in self.processors:
            if hasattr(processor, 'cleanup'):
                await processor.cleanup()

class VoiceChatPipecatRunner:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ –≤ Pipecat-style"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
        self.heygen_api_key = os.getenv("HEYGEN_API_KEY")
        self.deepgram_api_key = os.getenv("DEEPGRAM_API_KEY") 
        self.gemini_api_key = os.getenv("GEMINI_API_KEY")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á–∏
        if not self.heygen_api_key or self.heygen_api_key == "your_heygen_api_key_here":
            raise ValueError("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π HEYGEN_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        if not self.deepgram_api_key:
            raise ValueError("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DEEPGRAM_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        if not self.gemini_api_key:
            raise ValueError("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GEMINI_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—ã
        self.stt_processor = DeepgramSTTProcessor(self.deepgram_api_key)
        self.llm_processor = GeminiLLMProcessor(self.gemini_api_key)
        self.avatar_processor = HeyGenAvatarProcessor(self.heygen_api_key)
        
        # –°–æ–∑–¥–∞–µ–º pipeline
        self.pipeline = PipecatStylePipeline([
            self.stt_processor,        # –ê—É–¥–∏–æ ‚Üí –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            self.llm_processor,        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è ‚Üí LLM –æ—Ç–≤–µ—Ç  
            self.avatar_processor,     # LLM –æ—Ç–≤–µ—Ç ‚Üí Avatar
        ])
        
        logger.info("‚úÖ VoiceChatPipecatRunner –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    async def test_apis(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö API"""
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API...")
        
        # –¢–µ—Å—Ç Gemini
        try:
            genai.configure(api_key=self.gemini_api_key)
            model = genai.GenerativeModel('gemini-1.5-flash')
            response = model.generate_content("–°–∫–∞–∂–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
            logger.info(f"‚úÖ Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç: {response.text}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Gemini API: {e}")
            return False
        
        # –¢–µ—Å—Ç Deepgram (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞)
        try:
            logger.info("‚úÖ Deepgram API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ Deepgram API: {e}")
            return False
            
        return True
    
    async def run_voice_chat(self):
        """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ Pipecat-style pipeline...")
            logger.info("============================================================")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º pipeline
            await self.pipeline.start()
            
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é HeyGen
            if not await self.avatar_processor.start_session():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é HeyGen") 
                return
            
            logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —á–∞—Ç—É!")
            logger.info("üìã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ú–∏–∫—Ä–æ—Ñ–æ–Ω ‚Üí Pipecat STT ‚Üí Gemini LLM ‚Üí HeyGen Avatar ‚Üí –í–∏–¥–µ–æ")
            logger.info("============================================================")
            logger.info("üé§ –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω... (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            self.stt_processor.start_microphone()
            
            # –û–∂–∏–¥–∞–µ–º –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ü–∏–∫–ª–µ
            while True:
                await asyncio.sleep(1.0)
            
        except KeyboardInterrupt:
            logger.info("üë§ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞: {e}")
        finally:
            await self.cleanup()
    
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        try:
            logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            await self.pipeline.cleanup()
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print("ü§ñ HeyGen Voice Chat with Gemini - Pipecat-Style Edition")
        print("=" * 70)
        print("üìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   üé§ STT: Deepgram —á–µ—Ä–µ–∑ Pipecat-style –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä")
        print("   üß† LLM: Google Gemini (–∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä)")  
        print("   üë§ Avatar: HeyGen Interactive")
        print("   üìπ Video: LiveKit –∑–∞–ø–∏—Å—å + –∞—É–¥–∏–æ")
        print("   üîß Framework: Pipecat-inspired Pipeline")
        print("=" * 70)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç
        chat = VoiceChatPipecatRunner()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
        if not await chat.test_apis():
            logger.error("‚ùå –¢–µ—Å—Ç—ã API –Ω–µ –ø—Ä–æ—à–ª–∏")
            return
            
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç
        await chat.run_voice_chat()
        
    except KeyboardInterrupt:
        print("\\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        print(f"\\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
