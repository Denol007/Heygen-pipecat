#!/usr/bin/env python3
"""
–î–µ–º–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å HeyGen Interactive Avatar
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ STT + LLM + Avatar
"""

import asyncio
import logging
import os
import sys
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from heygen.session_manager import HeyGenSessionManager
from pipecat_integration.livekit_client import HeyGenLiveKitClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class VoiceChatDemo:
    """–î–µ–º–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏
        self.heygen_api_key = os.getenv("HEYGEN_API_KEY")
        if not self.heygen_api_key or self.heygen_api_key == "your_heygen_api_key_here":
            raise ValueError("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π HEYGEN_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.session_manager = HeyGenSessionManager(self.heygen_api_key)
        self.livekit_client = None
        self.current_session = None
        
    async def create_session(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é —Å –∞–≤–∞—Ç–∞—Ä–æ–º"""
        try:
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –∞–≤–∞—Ç–∞—Ä–æ–º...")
            
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            success = await self.session_manager.create_session()
            if not success:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            if not self.session_manager.session_id:
                logger.error("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω session_id")
                return False
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            self.current_session = {
                "session_id": self.session_manager.session_id,
                "url": self.session_manager.websocket_url,
                "access_token": self.session_manager.access_token
            }
            
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {self.session_manager.session_id}")
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
            start_success = await self.session_manager.start_session()
            if start_success:
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
            
    async def setup_livekit_connection(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LiveKit –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ"""
        try:
            if not self.current_session:
                logger.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit")
                return False
                
            self.livekit_client = HeyGenLiveKitClient()
            
            success = await self.livekit_client.connect(
                url=self.current_session["url"],
                access_token=self.current_session["access_token"],
                session_id=self.current_session["session_id"]
            )
            
            if success:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ LiveKit")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LiveKit")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit: {e}")
            return False
            
    async def simulate_voice_interaction(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ"""
        logger.info("üé≠ –°–∏–º—É–ª—è—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
        test_scenarios = [
            "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç",
            "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?",
            "–°–ø–∞—Å–∏–±–æ, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        ]
        
        for i, user_input in enumerate(test_scenarios, 1):
            logger.info(f"üé§ [{i}/4] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç: '{user_input}'")
            
            # 1. –ò–º–∏—Ç–∏—Ä—É–µ–º STT (Speech-to-Text)
            logger.info("üîÑ STT: –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏...")
            await asyncio.sleep(0.5)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            transcribed_text = user_input  # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç Deepgram
            logger.info(f"‚úÖ STT —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{transcribed_text}'")
            
            # 2. –ò–º–∏—Ç–∏—Ä—É–µ–º LLM –æ–±—Ä–∞–±–æ—Ç–∫—É
            logger.info("üîÑ LLM: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞...")
            await asyncio.sleep(1.0)  # –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
            # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –¥–µ–º–æ
            responses = {
                "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?": "–ü—Ä–∏–≤–µ—Ç! –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å!",
                "–†–∞—Å—Å–∫–∞–∂–∏ –∞–Ω–µ–∫–¥–æ—Ç": "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –Ω–µ –ª—é–±—è—Ç –ø—Ä–∏—Ä–æ–¥—É? –ü–æ—Ç–æ–º—É —á—Ç–æ —Ç–∞–º —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–∞–≥–æ–≤!",
                "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?": "–°–µ–≥–æ–¥–Ω—è –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –ø–æ–≥–æ–¥–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è!",
                "–°–ø–∞—Å–∏–±–æ, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –î–æ –≤—Å—Ç—Ä–µ—á–∏!"
            }
            
            llm_response = responses.get(user_input, "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º —ç—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.")
            logger.info(f"‚úÖ LLM –æ—Ç–≤–µ—Ç: '{llm_response}'")
            
            # 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            if self.current_session and self.livekit_client:
                logger.info("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–≤–∞—Ç–∞—Ä—É –∏ –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ...")
                
                # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
                task_id = f"demo_task_{i}_{int(time.time())}"
                await self.livekit_client.start_recording(task_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∞–≤–∞—Ç–∞—Ä—É
                await self.session_manager.send_task(
                    text=llm_response,
                    task_type="repeat"
                )
                
                # –ñ–¥–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –∞–≤–∞—Ç–∞—Ä–∞...")
                await asyncio.sleep(4.0)  # –í—Ä–µ–º—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é + –ø—Ä–æ–≥–æ–≤–∞—Ä–∏–≤–∞–Ω–∏–µ
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
                video_file = await self.livekit_client.stop_recording()
                if video_file:
                    logger.info(f"üìπ –í–∏–¥–µ–æ –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {video_file}")
                else:
                    logger.warning("‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                    
            logger.info("‚úÖ –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
            # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
            if i < len(test_scenarios):
                logger.info("‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏...")
                await asyncio.sleep(2.0)
                
    async def run_demo(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞...")
            logger.info("=" * 60)
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∞–≤–∞—Ç–∞—Ä–æ–º
            if not await self.create_session():
                return False
                
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ LiveKit –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
            if not await self.setup_livekit_connection():
                return False
                
            logger.info("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏!")
            logger.info("üìã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí STT ‚Üí LLM ‚Üí –ê–≤–∞—Ç–∞—Ä ‚Üí –í–∏–¥–µ–æ")
            logger.info("=" * 60)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
            await self.simulate_voice_interaction()
            
            logger.info("=" * 60)
            logger.info("üéä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ: {e}")
        finally:
            await self.cleanup()
            
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç LiveKit
            if self.livekit_client:
                await self.livekit_client.disconnect()
                
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∞–≤–∞—Ç–∞—Ä–æ–º
            if self.current_session:
                await self.session_manager.close_session()
                
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print("ü§ñ HeyGen Voice Chat - –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø")
        print("=" * 50)
        print("üìã –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
        print("   üé§ STT: Deepgram (–∏–º–∏—Ç–∞—Ü–∏—è)")
        print("   üß† LLM: OpenAI GPT (–∏–º–∏—Ç–∞—Ü–∏—è)")  
        print("   üë§ Avatar: HeyGen Interactive")
        print("   üìπ Video: LiveKit –∑–∞–ø–∏—Å—å")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á HeyGen
        heygen_key = os.getenv("HEYGEN_API_KEY")
        if not heygen_key or heygen_key == "your_heygen_api_key_here":
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–π HEYGEN_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
            print("üí° –û—Ç–∫—Ä–æ–π—Ç–µ .env –∏ –∑–∞–º–µ–Ω–∏—Ç–µ 'your_heygen_api_key_here' –Ω–∞ –≤–∞—à –∫–ª—é—á")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ
        demo = VoiceChatDemo()
        await demo.run_demo()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
