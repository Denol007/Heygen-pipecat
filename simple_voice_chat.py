#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç —Å HeyGen Interactive Avatar
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Deepgram STT + OpenAI LLM + HeyGen Avatar
"""

import asyncio
import logging
import os
import sys
import json
import time
import threading
import queue
from typing import Optional, Dict, Any
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# Speech-to-Text
from deepgram import (
    DeepgramClient,
    LiveTranscriptionEvents,
    LiveOptions,
    Microphone,
)

# LLM
import openai

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from heygen.session_manager import HeyGenSessionManager
from pipecat_integration.livekit_client import HeyGenLiveKitClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SimpleVoiceChat:
    """–ü—Ä–æ—Å—Ç–æ–π –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç —Å –∞–≤–∞—Ç–∞—Ä–æ–º"""
    
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        self.heygen_api_key = os.getenv("HEYGEN_API_KEY")
        self.deepgram_api_key = os.getenv("DEEPGRAM_API_KEY")
        self.openai_api_key = os.getenv("OPENAI_API_KEY")
        
        if not self.heygen_api_key:
            raise ValueError("HEYGEN_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not self.deepgram_api_key:
            raise ValueError("DEEPGRAM_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not self.openai_api_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        self.session_manager = HeyGenSessionManager(self.heygen_api_key)
        self.livekit_client = None
        self.current_session = None
        
        # Deepgram –∫–ª–∏–µ–Ω—Ç
        self.deepgram = DeepgramClient(self.deepgram_api_key)
        self.dg_connection = None
        self.microphone = None
        
        # OpenAI –∫–ª–∏–µ–Ω—Ç
        self.openai_client = openai.OpenAI(api_key=self.openai_api_key)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.is_listening = False
        self.is_recording = False
        self.conversation_history = [
            {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –º–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."}
        ]
        
        # –û—á–µ—Ä–µ–¥—å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_queue = queue.Queue()
        
    async def create_session(self) -> bool:
        """–°–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é —Å –∞–≤–∞—Ç–∞—Ä–æ–º"""
        try:
            logger.info("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –∞–≤–∞—Ç–∞—Ä–æ–º...")
            
            # –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
            if self.current_session:
                await self.session_manager.close_session(self.current_session["session_id"])
                
            # –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            session_data = await self.session_manager.create_session()
            if not session_data:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é")
                return False
                
            self.current_session = session_data
            logger.info(f"‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: {session_data['session_id']}")
            
            # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
            success = await self.session_manager.start_session(session_data["session_id"])
            if success:
                logger.info("‚úÖ –°–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Å—Å–∏—é")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: {e}")
            return False
            
    async def setup_livekit_connection(self) -> bool:
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ LiveKit –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ"""
        try:
            if not self.current_session:
                logger.error("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit")
                return False
                
            self.livekit_client = HeyGenLiveKitClient()
            
            success = await self.livekit_client.connect(
                url=self.current_session["url"],
                access_token=self.current_session["access_token"],
                session_id=self.current_session["session_id"]
            )
            
            if success:
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ LiveKit")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ LiveKit")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ LiveKit: {e}")
            return False
            
    def setup_deepgram_stt(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Deepgram Speech-to-Text"""
        try:
            logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Deepgram STT...")
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self.dg_connection = self.deepgram.listen.live.v("1")
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            def on_open(self, open, **kwargs):
                logger.info("‚úÖ Deepgram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–æ")
                
            def on_message(self, result, **kwargs):
                sentence = result.channel.alternatives[0].transcript
                if sentence.strip():
                    logger.info(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {sentence}")
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    self.message_queue.put(sentence)
                    
            def on_metadata(self, metadata, **kwargs):
                logger.debug(f"üìä Metadata: {metadata}")
                
            def on_speech_started(self, speech_started, **kwargs):
                logger.debug("üé§ –ù–∞—á–∞–ª–æ —Ä–µ—á–∏")
                
            def on_utterance_end(self, utterance_end, **kwargs):
                logger.debug("üé§ –ö–æ–Ω–µ—Ü –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è")
                
            def on_close(self, close, **kwargs):
                logger.info("üîê Deepgram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
                
            def on_error(self, error, **kwargs):
                logger.error(f"‚ùå Deepgram –æ—à–∏–±–∫–∞: {error}")
                
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            self.dg_connection.on(LiveTranscriptionEvents.Open, on_open)
            self.dg_connection.on(LiveTranscriptionEvents.Transcript, on_message)
            self.dg_connection.on(LiveTranscriptionEvents.Metadata, on_metadata)
            self.dg_connection.on(LiveTranscriptionEvents.SpeechStarted, on_speech_started)
            self.dg_connection.on(LiveTranscriptionEvents.UtteranceEnd, on_utterance_end)
            self.dg_connection.on(LiveTranscriptionEvents.Close, on_close)
            self.dg_connection.on(LiveTranscriptionEvents.Error, on_error)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            options = LiveOptions(
                model="nova-2",
                language="ru",
                smart_format=True,
                interim_results=False,
                utterance_end_ms="1000",
                vad_events=True,
                endpointing=300
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if self.dg_connection.start(options):
                logger.info("‚úÖ Deepgram STT –≥–æ—Ç–æ–≤")
                return True
            else:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Deepgram STT")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Deepgram STT: {e}")
            return False
            
    def setup_microphone(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω"""
        try:
            logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞...")
            
            self.microphone = Microphone(self.dg_connection.send)
            logger.info("‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –≥–æ—Ç–æ–≤")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
            return False
            
    async def generate_llm_response(self, user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ OpenAI"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({"role": "user", "content": user_message})
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 10 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            if len(self.conversation_history) > 11:  # system + 10 messages
                self.conversation_history = [self.conversation_history[0]] + self.conversation_history[-10:]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = self.openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=self.conversation_history,
                max_tokens=150,
                temperature=0.7
            )
            
            assistant_message = response.choices[0].message.content.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({"role": "assistant", "content": assistant_message})
            
            logger.info(f"ü§ñ LLM –æ—Ç–≤–µ—Ç: {assistant_message}")
            return assistant_message
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ LLM –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞."
            
    async def process_messages(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        while self.is_listening:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å —Å–æ–æ–±—â–µ–Ω–∏–π
                if not self.message_queue.empty():
                    user_message = self.message_queue.get_nowait()
                    
                    if user_message.strip():
                        logger.info(f"üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞: {user_message}")
                        
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ LLM
                        llm_response = await self.generate_llm_response(user_message)
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞–≤–∞—Ç–∞—Ä—É
                        if self.current_session and llm_response:
                            # –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ –æ—Ç–≤–µ—Ç–∞
                            if self.livekit_client:
                                task_id = f"voice_task_{int(time.time())}"
                                self.livekit_client.start_recording(task_id)
                                
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä—É
                            await self.session_manager.send_task(
                                self.current_session["session_id"],
                                llm_response
                            )
                            
                            # –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
                            await asyncio.sleep(3.0)
                            
                            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø–∏—Å—å
                            if self.livekit_client:
                                video_file = await self.livekit_client.stop_recording()
                                if video_file:
                                    logger.info(f"üìπ –í–∏–¥–µ–æ –æ—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {video_file}")
                                    
                await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                
            except queue.Empty:
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await asyncio.sleep(1.0)
                
    async def start_voice_chat(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç"""
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞ —Å –∞–≤–∞—Ç–∞—Ä–æ–º...")
            
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∞–≤–∞—Ç–∞—Ä–æ–º
            if not await self.create_session():
                return False
                
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ LiveKit –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ
            if not await self.setup_livekit_connection():
                return False
                
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Deepgram STT
            if not self.setup_deepgram_stt():
                return False
                
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            if not self.setup_microphone():
                return False
                
            logger.info("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã!")
            logger.info("üé§ –ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω, —è –≤–∞—Å —Å–ª—É—à–∞—é...")
            logger.info("üìù –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ
            self.is_listening = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            self.microphone.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
            message_task = asyncio.create_task(self.process_messages())
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                while self.is_listening:
                    await asyncio.sleep(1.0)
            except KeyboardInterrupt:
                logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")
                
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
            self.is_listening = False
            await message_task
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ: {e}")
        finally:
            await self.cleanup()
            
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        logger.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        
        try:
            self.is_listening = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–∫—Ä–æ—Ñ–æ–Ω
            if self.microphone:
                self.microphone.finish()
                
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Deepgram —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if self.dg_connection:
                self.dg_connection.finish()
                
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç LiveKit
            if self.livekit_client:
                await self.livekit_client.disconnect()
                
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é —Å –∞–≤–∞—Ç–∞—Ä–æ–º
            if self.current_session:
                await self.session_manager.close_session(self.current_session["session_id"])
                
            logger.info("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print("ü§ñ HeyGen Voice Chat")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        required_vars = ["HEYGEN_API_KEY", "DEEPGRAM_API_KEY", "OPENAI_API_KEY"]
        missing_vars = [var for var in required_vars if not os.getenv(var)]
        
        if missing_vars:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
            logger.info("üí° –°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ API –∫–ª—é—á–∏")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç
        voice_chat = SimpleVoiceChat()
        await voice_chat.start_voice_chat()
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    asyncio.run(main())
